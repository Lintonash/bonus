from typing import List, Literal, Optional, TypedDict

from damage.custom_types import CostComponentsEnum


class Hightlights(TypedDict):
    minimum: int
    medium: int
    maximum: int


class EcrqScaleDist(TypedDict):
    specific: float
    systemic: float


class EcrqTypeDist(TypedDict):
    attacks: float
    failures: float


class EcrqEvent(TypedDict):
    title: str
    description: str
    event_type: Literal["systemic", "specific"]
    event_cause: Literal["attack", "service"]
    duration: Optional[int]
    technology_impacted: str
    damage_types: List[CostComponentsEnum]


class PerScenarioAnalysis(TypedDict):
    # we might want to make this type more verbose
    scenario_impact: float
    probability: float
    type_distribution: EcrqTypeDist
    scale_distribution: EcrqScaleDist
    ep_curve: list
    damage_types: list
    highlights: Hightlights
    events: List[EcrqEvent]


class TotalAnalysis(TypedDict):
    ep_curve: list
    highlights: Hightlights
