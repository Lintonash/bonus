from enum import Enum
from typing import Any, Dict, List, NamedTuple

from damage.coverages import Coverage

CoverageDamage = int
DamageFactor = float
DamageType = str

CoverageDamageDict = Dict[Coverage, CoverageDamage]
DamageFactorDict = Dict[Coverage, DamageFactor]


class SingleDamageDist(NamedTuple):
    damage: CoverageDamageDict
    probability: float


DamageDist = List[SingleDamageDist]


class AggregatedLossParams(NamedTuple):
    coverages_ratio: Dict[Coverage, float]
    mean: int
    std: int
    exposure: int


class GroundUpDamageEntityWithoutBetaParams(NamedTuple):
    event_id: int
    entity_id: int
    year: int
    event_duration: float  # Needed for BI duration insurance terms (in minutes, same as hazardObj.min_impactful_outage_duration)
    probability: float
    gu_bi_ratio: float
    gu_contingent_bi_ratio: float
    gu_privacy_ratio: float
    gu_liability_ratio: float
    gu_regulatory_ratio: float
    gu_extortion_ratio: float

    correlation_group: str
    correlation: float

    # stats
    gu_mean: int
    gu_std: int
    gu_exposure: int


class GroundUpDamageEntity(NamedTuple):
    event_id: int
    entity_id: int
    year: int
    event_duration: float  # Needed for BI duration insurance terms
    probability: float
    gu_bi_ratio: float
    gu_contingent_bi_ratio: float
    gu_privacy_ratio: float
    gu_liability_ratio: float
    gu_regulatory_ratio: float
    gu_extortion_ratio: float

    correlation_group: str
    correlation: float

    # stats
    gu_mean: int
    gu_std: int
    gu_exposure: int

    # beta distribution related
    gu_mu: float
    gu_sigma: float
    gu_a: float
    gu_b: float


class StochasticGroundUpDamageEntity(NamedTuple):
    event_id: int
    entity_id: int
    year: int
    event_duration: float  # Needed for BI duration insurance terms
    probability: float

    correlation_group: str
    correlation: float

    # stats per coverage_type
    gu_sum_max: int
    gu_sum_mean: int
    gu_sum_std: int
    gu_liability_max: int
    gu_liability_mean: int
    gu_liability_std: int
    gu_bi_max: int
    gu_bi_mean: int
    gu_bi_std: int
    gu_extortion_max: int
    gu_extortion_mean: int
    gu_extortion_std: int
    gu_privacy_max: int
    gu_privacy_mean: int
    gu_privacy_std: int
    gu_contingent_bi_max: int
    gu_contingent_bi_mean: int
    gu_contingent_bi_std: int
    gu_regulatory_max: int
    gu_regulatory_mean: int
    gu_regulatory_std: int

    # beta distribution related
    gu_mu: float
    gu_sigma: float
    gu_a: float
    gu_b: float


class GrossDamageEntity(NamedTuple):
    event_id: int
    entity_id: int
    year: int
    probability: float

    correlation_group: str
    correlation: float

    ######### gu #########

    gu_bi_ratio: float
    gu_contingent_bi_ratio: float
    gu_privacy_ratio: float
    gu_liability_ratio: float
    gu_regulatory_ratio: float
    gu_extortion_ratio: float

    # stats
    gu_mean: int
    gu_std: int
    gu_exposure: int

    ######### gross #########

    gross_bi_ratio: float
    gross_contingent_bi_ratio: float
    gross_privacy_ratio: float
    gross_liability_ratio: float
    gross_regulatory_ratio: float
    gross_extortion_ratio: float

    # stats
    gross_mean: int
    gross_std: int
    gross_exposure: int


class ReinsuranceDamageEntity(NamedTuple):
    event_id: int
    entity_id: int
    year: int
    probability: float

    correlation_group: str
    correlation: float

    gu_bi_ratio: float
    gu_contingent_bi_ratio: float
    gu_privacy_ratio: float
    gu_liability_ratio: float
    gu_regulatory_ratio: float
    gu_extortion_ratio: float

    # stats
    gu_mean: int
    gu_std: int
    gu_exposure: int

    ######### gross #########

    gross_bi_ratio: float
    gross_contingent_bi_ratio: float
    gross_privacy_ratio: float
    gross_liability_ratio: float
    gross_regulatory_ratio: float
    gross_extortion_ratio: float

    # stats
    gross_mean: int
    gross_std: int
    gross_exposure: int

    ######### re #########

    re_bi_ratio: float
    re_contingent_bi_ratio: float
    re_privacy_ratio: float
    re_liability_ratio: float
    re_regulatory_ratio: float
    re_extortion_ratio: float

    # stats
    re_mean: int
    re_std: int
    re_exposure: int


class ReinsuranceDamageEvent(NamedTuple):
    event_id: int
    year: int
    probability: float
    re_bi_ratio: float
    re_contingent_bi_ratio: float
    re_privacy_ratio: float
    re_liability_ratio: float
    re_regulatory_ratio: float
    re_extortion_ratio: float
    re_mean: int
    re_exposure: int
    re_std: int


class ReinsuranceELT(NamedTuple):
    event_id: int
    year: int
    sum_mean: int
    sum_std: int
    sum_max: int
    bi_mean: int
    bi_std: int
    bi_max: int
    contingent_bi_mean: int
    contingent_bi_std: int
    contingent_bi_max: int
    regulatory_mean: int
    regulatory_std: int
    regulatory_max: int
    liability_mean: int
    liability_std: int
    liability_max: int
    extortion_mean: int
    extortion_std: int
    extortion_max: int
    privacy_mean: int
    privacy_std: int
    privacy_max: int


class CostComponentsEnum(str, Enum):
    LOST_INCOME = "lost_income"
    BI_RECOVERY_EXPENSES = "bi_recovery_expenses"
    EXTORTION_RECOVERY_EXPENSES = "extortion_recovery_expenses"
    BI_FORENSICS = "bi_forensics"
    FORENSICS = "forensics"
    PR_REPAIRMENT = "public_relations_repairment"
    MONITORING_SERVICES = "monitoring_services"
    NOTIFICATIONS = "notifications"
    DATA_RECOVERY = "data_recovery"
    REGULATORY_FINES = "regulatory_fines"
    REGULATORY_LEGAL_DEFENSE = "regulatory_legal_defense"
    EXTORTION_PAYMENT = "extortion_payment"
    SETTLEMENTS = "settlements"
    LEGAL_DEFENSE = "legal_defense"


class TypeOfDataBreached(str, Enum):
    PCI = "PCI"
    PII = "PII"
    PHI = "PHI"
    UNDEFINED = "Undefined sensitive data"


class TypeOfBILevel(str, Enum):
    LOW = "low"
    MID = "mid"
    HIGH = "high"


class LossTypes(str, Enum):
    GROUNDUP = "gu"
    GROSS = "gross"
    REINSURANCE = "re"


class LossColumns(Enum):
    EXPOSURE = "exposure"
    MEAN = "mean"
    STD = "std"


class GULossColumns(str, Enum):
    EXPOSURE = f"{LossTypes.GROUNDUP}_{LossColumns.EXPOSURE.value}"
    MEAN = f"{LossTypes.GROUNDUP}_{LossColumns.MEAN.value}"
    STD = f"{LossTypes.GROUNDUP}_{LossColumns.STD.value}"


GUCoverageRatio = [f"{LossTypes.GROUNDUP}_{cov}_ratio" for cov in Coverage]


class RandomizedParamsType(Enum):
    # LAWSUIT_OCCURED = "lawsuit_occured"
    # LAWSUIT_LOST = "lawsuit_lost"
    # FRAUD_EXPECTED = "fraud_expected"
    # PCI_NON_COMPLIANCE = "pci_non_compliance"
    # PHI_NON_COMPLIANCE = "phi_non_compliance"
    GDPR_NON_COMPLIANT = "gdpr_non_compliant"
    # CCPA_NON_COMPLIANT = "ccpa_non_compliant"
    CENTRALIZED_DATA = "centralized_data"
    EXTORTION_PAID = "extortion_paid"
    # FIRST_INCIDENT = "first_incident"
    TYPE_OF_DATA_DIST = "type_of_data_dist"
    GDPR_TYPE_DIST = "gdpr_type_dist"
    BI_LEVEL = "bi_level"


ReducedRandomizedParams = Dict[str, Any]
